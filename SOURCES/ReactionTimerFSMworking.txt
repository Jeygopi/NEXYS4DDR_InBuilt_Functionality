`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 28.03.2018 18:57:49
// Design Name: 
// Module Name: ReactionTimer_FSM_Refined
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module ReactionTimer_FSM_Refined(
    input wire clk,
    input wire resetFSM,
    input wire clk_1kHz,
    input wire idletoPrep,
    input wire testtoResult,
    output reg [15:0] led,
    output wire [6:0] ssdCathode,
    output reg [7:0] ssdAnode
    );
    
    parameter IDLE_MODE = 4'b0001;
    parameter PREPARATION_MODE = 4'b0010;
    parameter TEST_MODE = 4'b0100;
    parameter RESULT_MODE = 4'b1000;
    
    edgeDetector CHANGE_STATE_IDLE_TO_PREP (
        .clk(clk),
        .signalIn(idletoPrep),
        .signalOut(),
        .risingEdge(idletoPrep_risingEdge),
        .fallingEdge()
    );
    
    edgeDetector CHANGE_STATE_TEST_TO_RESULT (
        .clk(clk),
        .signalIn(testtoResult),
        .signalOut(),
        .risingEdge(testtoResult_risingEdge),
        .fallingEdge()
    );
    
    reg [3:0] resultCounter;
    reg [3:0] state, nextState;
    reg [31:0] preparationCounter;
    
    always @(posedge clk) begin
        case(state)
            IDLE_MODE : begin //Put the words reaction timer on the display
                if (idletoPrep_risingEdge == 1) begin
                    nextState <= PREPARATION_MODE;
                end
            end
             //cycle from left to right 
            PREPARATION_MODE : begin //count down/perform some visual indication
                if (preparationCounter > 32'd50) begin
                    nextState <= TEST_MODE;
                end else begin
                    nextState <= PREPARATION_MODE;
                end
            end
                
            TEST_MODE : begin //becomes active as soon as preparation ends
                if (testtoResult_risingEdge == 1) begin
                    nextState <= RESULT_MODE;
                end else if (resetFSM == 1) begin
                    nextState <= IDLE_MODE;
                end
            end                              //terminate when reaction test ends when
                              //subject pushes a button
            RESULT_MODE : begin //dispalys result on seven segment display
                if (resultCounter > 4'd10 || resetFSM == 1) begin
                    nextState <= IDLE_MODE;
                end else begin 
                    nextState <= RESULT_MODE;
                end                                       //before reverting to idle mode 
            end
            
            default : nextState <= IDLE_MODE;
        endcase
    end
    
    always @(posedge clk) begin
        if (resetFSM) begin
            state <= IDLE_MODE;
        end else begin
            state <= nextState;
        end
    end
    
    always @(posedge clk_1kHz) begin
        if (state == PREPARATION_MODE) begin
            preparationCounter <= preparationCounter + 32'd1;
        end
    end
        
    reg [3:0] counter_a, counter_b, counter_c, counter_d;

    always @(posedge clk_1kHz) begin
        if (state == TEST_MODE && counter_a < 4'd10) begin
            led [15:0] = 16'b1111_1111_1111_1111;
            counter_a = counter_a + 4'd1;
        end else if (counter_a >= 4'd9 && counter_b < 4'd10) begin
            counter_a <= 4'd0;
            counter_b <= counter_b + 4'd1;
        end else if (counter_b >= 4'd9 && counter_c < 4'd10) begin
            counter_b <= 4'd0;
            counter_c <= counter_c + 4'd1;
        end else if (counter_c >= 4'd9 && counter_d < 4'd10) begin
            counter_c <= 4'd0;
            counter_d <= counter_d + 4'd1;
        end else begin
            led [15:0] = 16'b0000_0000_0000_0000;
        end
    end
    
    reg [1:0] activeDisplay;
    always @(posedge clk_1kHz) begin
        if (activeDisplay >= 2'b11) begin
            activeDisplay <= 2'b00;
        end else begin
            activeDisplay <= activeDisplay + 2'b01;
        end
    end
    
    reg [3:0] ssdNumber;
    
    always @(posedge clk_1kHz) begin
        if (state == RESULT_MODE) begin
            case(activeDisplay)
                2'd0 : begin
                    ssdNumber <= counter_a;
                    ssdAnode <= 8'b1111_1110;
                end
                2'd1 : begin
                    ssdNumber <= counter_b;
                    ssdAnode <= 8'b1111_1101;
                end    
                2'd2 : begin
                    ssdNumber <= counter_c;
                    ssdAnode <= 8'b1111_1011;
                end
                2'd3 : begin
                    ssdNumber <= counter_d;
                    ssdAnode <= 8'b1111_0111;
                end
            endcase
        end
    end
    
    sevenSegmentDecoder SSD (
        .bcd(ssdNumber),
        .ssd(ssdCathode)
    );    
endmodule
